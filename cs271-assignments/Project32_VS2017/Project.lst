Microsoft (R) Macro Assembler Version 14.10.25019.0	    03/18/18 18:49:46
Assignment 						     Page 1 - 1


				TITLE Assignment 2

				; Author: Logan Saso
				; Assembly Language 271 Assignment 6                Date: 3/18/2018
				; Description: Takes 10 unsigned positive integars and prints them, their sum, and their average.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; largest 32 bit uint is 4294967295
 = 0000000A			MAX_CHAR	EQU		10




 00000000			.data

 00000000 48 69 2C 20 6D	introText		BYTE	"Hi, my name is Logan and we'll taking 10 unsigned positive 32bit integars and doing some math with them.", 0
	   79 20 6E 61 6D
	   65 20 69 73 20
	   4C 6F 67 61 6E
	   20 61 6E 64 20
	   77 65 27 6C 6C
	   20 74 61 6B 69
	   6E 67 20 31 30
	   20 75 6E 73 69
	   67 6E 65 64 20
	   70 6F 73 69 74
	   69 76 65 20 33
	   32 62 69 74 20
	   69 6E 74 65 67
	   61 72 73 20 61
	   6E 64 20 64 6F
	   69 6E 67 20 73
	   6F 6D 65 20 6D
	   61 74 68 20 77
	   69 74 68 20 74
	   68 65 6D 2E 00
 00000069 54 68 61 6E 6B	goodbyeText		BYTE	"Thanks for running this assignment!", 0
	   73 20 66 6F 72
	   20 72 75 6E 6E
	   69 6E 67 20 74
	   68 69 73 20 61
	   73 73 69 67 6E
	   6D 65 6E 74 21
	   00

 0000008D 54 68 69 73 20	description		BYTE	"This program will print a specified number of composite numbers.", 0
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 70 72
	   69 6E 74 20 61
	   20 73 70 65 63
	   69 66 69 65 64
	   20 6E 75 6D 62
	   65 72 20 6F 66
	   20 63 6F 6D 70
	   6F 73 69 74 65
	   20 6E 75 6D 62
	   65 72 73 2E 00
 000000CE 50 6C 65 61 73	numPrompt		BYTE	"Please enter an unsigned 32bit number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 6E
	   20 75 6E 73 69
	   67 6E 65 64 20
	   33 32 62 69 74
	   20 6E 75 6D 62
	   65 72 3A 20 00
 000000F6 54 68 61 74 20	invalidNumStr	BYTE	"That is not a valid 32-bit number! Try again.", 0
	   69 73 20 6E 6F
	   74 20 61 20 76
	   61 6C 69 64 20
	   33 32 2D 62 69
	   74 20 6E 75 6D
	   62 65 72 21 20
	   54 72 79 20 61
	   67 61 69 6E 2E
	   00

				; an array of 10, 4-byte (32-bit) segments of memory
 00000124  0000000A [		array			DWORD	10	DUP(?)
	    00000000
	   ]

 0000014C 20 20 00		numSpacing		BYTE	"  ", 0
 0000014F 54 68 65 20 61	arrayLabel		BYTE	"The array is: ", 0
	   72 72 61 79 20
	   69 73 3A 20 00
 0000015E 54 68 65 20 61	averageText		BYTE	"The average is: ", 0
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 0000016F 54 68 65 20 73	sumText			BYTE	"The sum is: ", 0
	   75 6D 20 69 73
	   3A 20 00

 0000017C			singleNumString	BYTE	11	DUP(0)
 00000187			correctOrderStr	BYTE	11	DUP(0)
 00000192 00000000		singleNum		DWORD	?
 00000196 00000000		didCarry		DWORD	?

				displayString MACRO stringOffset 

					push	edx

					mov		edx, stringOffset
					call	WriteString

					pop		edx

				ENDM

				getString MACRO	destinationAddress

					pushad
					mov		edx, destinationAddress
					mov		ecx, MAX_CHAR

					call	ReadString

					popad

				ENDM

 00000000			.code
 00000000			main PROC

 00000000  68 00000000 R		push	OFFSET introText
 00000005  E8 000000A8			call	intro
 0000000A  E8 00000000 E		call	CrLf

 0000000F  68 000000F6 R		push	OFFSET invalidNumStr
 00000014  68 00000196 R		push	OFFSET didCarry
 00000019  68 00000192 R		push	OFFSET singleNum
 0000001E  68 0000017C R		push	OFFSET singleNumString
 00000023  68 000000CE R		push	OFFSET numPrompt
 00000028  68 00000124 R		push	OFFSET array 
 0000002D  E8 00000091			call	fillArray 

 00000032  E8 00000000 E		call	CrLf
					

					displayString OFFSET arrayLabel
 00000037  52		     1		push	edx
 00000038  BA 0000014F R     1		mov		edx, OFFSET arrayLabel
 0000003D  E8 00000000 E     1		call	WriteString
 00000042  5A		     1		pop		edx
 00000043  68 0000014C R		push	OFFSET numSpacing
 00000048  68 00000187 R		push	OFFSET correctOrderStr
 0000004D  68 0000017C R		push	OFFSET singleNumString
 00000052  68 00000124 R		push	OFFSET array
 00000057  E8 00000151			call	printArray
 0000005C  E8 00000000 E		call	CrLf

					displayString OFFSET sumText
 00000061  52		     1		push	edx
 00000062  BA 0000016F R     1		mov		edx, OFFSET sumText
 00000067  E8 00000000 E     1		call	WriteString
 0000006C  5A		     1		pop		edx
 0000006D  68 00000187 R		push	OFFSET correctOrderStr
 00000072  68 0000017C R		push	OFFSET singleNumString
 00000077  68 00000124 R		push	OFFSET array
 0000007C  E8 0000015A			call	printSum
 00000081  E8 00000000 E		call	CrLf

					displayString OFFSET averageText
 00000086  52		     1		push	edx
 00000087  BA 0000015E R     1		mov		edx, OFFSET averageText
 0000008C  E8 00000000 E     1		call	WriteString
 00000091  5A		     1		pop		edx
 00000092  68 00000187 R		push	OFFSET correctOrderStr
 00000097  68 0000017C R		push	OFFSET singleNumString
 0000009C  68 00000124 R		push	OFFSET array
 000000A1  E8 0000015F			call	printAverage
 000000A6  E8 00000000 E		call	CrLf


					exit
 000000AB  6A 00	   *	    push   +000000000h
 000000AD  E8 00000000 E   *	    call   ExitProcess
 000000B2			main ENDP

 000000B2			intro PROC
					
 000000B2  55				push	ebp
 000000B3  8B EC			mov		ebp, esp
								
					displayString [ebp + 8]
 000000B5  52		     1		push	edx
 000000B6  8B 55 08	     1		mov		edx, [ebp + 8]
 000000B9  E8 00000000 E     1		call	WriteString
 000000BE  5A		     1		pop		edx

 000000BF  5D				pop		ebp

 000000C0  C2 0004			ret		4
 000000C3			intro ENDP


				; +8:  array
				; +12: numPrompt
				; +16: singleNumString
				; +20: singleNum
				; +24: didCarry
				; +28: invalidNumStr
 000000C3			fillArray PROC

 000000C3  55				push	ebp
 000000C4  8B EC			mov		ebp, esp

 000000C6  60				pushad
					
					;our array start
 000000C7  8B 45 08			mov		eax, [ebp + 8]
 000000CA  8B 55 0C			mov		edx, [ebp + 12]

					;we only want 10 numbers
 000000CD  B9 0000000A			mov		ecx, 10
					
 000000D2			loadStart:


					displayString	edx
 000000D2  52		     1		push	edx
 000000D3  8B D2	     1		mov		edx, edx
 000000D5  E8 00000000 E     1		call	WriteString
 000000DA  5A		     1		pop		edx
 000000DB  FF 75 18			push	[ebp + 24]
 000000DE  FF 75 14			push	[ebp + 20]
 000000E1  FF 75 10			push	[ebp + 16]
 000000E4  E8 00000044			call	readVal 

 000000E9  8B 5D 18			mov		ebx, [ebp + 24]
 000000EC  8B 1B			mov		ebx, [ebx]
 000000EE  83 FB 01			cmp		ebx, 1
 000000F1  75 14			jne		didntCarry

 000000F3  83 C1 01			add		ecx, 1
					
					displayString [ebp + 28]
 000000F6  52		     1		push	edx
 000000F7  8B 55 1C	     1		mov		edx, [ebp + 28]
 000000FA  E8 00000000 E     1		call	WriteString
 000000FF  5A		     1		pop		edx
 00000100  E8 00000000 E		call	CrLf

 00000105  EB 1F			jmp		endCarryCheck
 00000107				didntCarry:


 00000107  53				push ebx
 00000108  51				push ecx
 00000109  52				push edx

 0000010A  50				push eax
					

 0000010B  B8 00000004			mov		eax, 4
 00000110  F7 E1			mul		ecx
 00000112  8B C8			mov		ecx, eax
 00000114  83 E9 04			sub		ecx, 4

 00000117  58				pop eax

 00000118  8B 5D 14			mov		ebx, [ebp + 20]
 0000011B  8B 1B			mov		ebx, [ebx]
					
 0000011D  50				push	eax
 0000011E  03 C1			add		eax, ecx
 00000120  89 18			mov		[eax], ebx
 00000122  58				pop		eax

 00000123  5A				pop edx
 00000124  59				pop ecx
 00000125  5B				pop ebx


 00000126				endCarryCheck:
					
 00000126  E2 AA			loop	loadStart
 00000128			loadEnd:

 00000128  61				popad

 00000129  5D				pop		ebp
 0000012A  C2 0018			ret		24

 0000012D			fillArray ENDP

				; +8: singleNumString
				; +12: singleNum
				; +16: didCarry
 0000012D			readVal PROC
 0000012D  55				push	ebp
 0000012E  8B EC			mov		ebp, esp

 00000130  60				pushad

					getString [ebp + 8]
 00000131  60		     1		pushad
 00000132  8B 55 08	     1		mov		edx, [ebp + 8]
 00000135  B9 0000000A	     1		mov		ecx, MAX_CHAR
 0000013A  E8 00000000 E     1		call	ReadString
 0000013F  61		     1		popad

 00000140  FF 75 10			push	  [ebp + 16]
 00000143  FF 75 0C			push	  [ebp + 12]
 00000146  FF 75 08			push 	  [ebp + 8]
 00000149  E8 00000005			call	  convertToNum

 0000014E  61				popad
 0000014F  5D				pop		ebp
					
 00000150  C2 000C			ret		12
 00000153			readVal	ENDP

				; +8 numString
				; +12 numDest
				; +16 didCarry
 00000153			convertToNum PROC
 00000153  55				push	ebp
 00000154  8B EC			mov		ebp, esp

 00000156  60				pushad

					

 00000157  8B 75 08			mov		esi, [ebp + 8]
 0000015A  8B 4D 10			mov		ecx, [ebp + 16]
 0000015D  52				push	edx
 0000015E  BA 00000000			mov		edx, 0
 00000163  89 11			mov		[ecx], edx
 00000165  5A				pop		edx

 00000166  FC				cld
 00000167  33 D2			xor		edx, edx
 00000169  33 C0			xor		eax, eax

 0000016B			nextDigit:
					;we have to multiply each digit by another factor of 10. This moves the entire number "over one" and makes room for the next digit
 0000016B  50				push	eax
 0000016C  B8 0000000A			mov		eax, 10
 00000171  F7 E2			mul		edx
 00000173  8B D0			mov		edx, eax
 00000175  58				pop		eax
					;check to see that our multiplication didn't just unsigned overflow
 00000176  72 15			jc		invalidNumber

					;load the first byte from esi into al	
 00000178  AC				lodsb

					;Check for our null terminator
 00000179  3C 00			cmp		al, 0
 0000017B  74 19			je		noMoreDigits

					;In ascii, the numbers start at the 48th index. This converts char to number
 0000017D  2C 30			sub		al, 48
					;If we are left with a value greater than 10, they put in a non-numeric character
 0000017F  3C 0A			cmp		al, 10
 00000181  7D 0A			jge		invalidNumber
					
					;We should not have a negative number here ever, but let's check anyways
 00000183  3C 00			cmp		al, 0
 00000185  7C 06			jl		invalidNumber
					
					;Add our number to our total. 
 00000187  03 D0			add		edx, eax
					;check to see that our addition didn't just unsigned overflow
 00000189  72 02			jc		invalidNumber

 0000018B  EB DE			jmp		nextDigit

 0000018D			invalidNumber:
 0000018D  52				push	edx
 0000018E  BA 00000001			mov		edx, 1
 00000193  89 11			mov		[ecx], edx
 00000195  5A				pop		edx

 00000196			noMoreDigits: 

 00000196  8B 4D 0C			mov		ecx, [ebp + 12]

 00000199  8B C2			mov		eax, edx
 0000019B  33 D2			xor		edx, edx

 0000019D  51				push	ecx
 0000019E  B9 0000000A			mov		ecx, 10
 000001A3  F7 F1			div		ecx
 000001A5  59				pop		ecx

 000001A6  89 01			mov		[ecx], eax

 000001A8  61				popad
					
 000001A9  5D				pop		ebp
 000001AA  C2 000C			ret		12
 000001AD			convertToNum ENDP


				; +8 array
				; +12 singleNumString
				; +16 correctOrderStr
				; +20 numSpacing
 000001AD			printArray PROC
 000001AD  55				push	ebp
 000001AE  8B EC			mov		ebp, esp
 000001B0  60				pushad
					
 000001B1  8B 75 08			mov		esi, [ebp + 8]
 000001B4  B9 0000000A			mov		ecx, 10

 000001B9				startPrint:

 000001B9  8B 06				mov		eax, [esi]
						
 000001BB  FF 75 10				push	[ebp + 16]
 000001BE  FF 75 0C				push	[ebp + 12]
 000001C1  50					push	eax
 000001C2  E8 00000071				call	writeVal

						displayString [ebp + 20]
 000001C7  52		     1		push	edx
 000001C8  8B 55 14	     1		mov		edx, [ebp + 20]
 000001CB  E8 00000000 E     1		call	WriteString
 000001D0  5A		     1		pop		edx

 000001D1  83 C6 04				add		esi, 4


 000001D4  E2 E3				loop	startPrint
					

 000001D6  61				popad
 000001D7  5D				pop		ebp
 000001D8  C2 000C			ret		12

 000001DB			printArray ENDP

				; +8 array
				; +12 singleNumString
				; +16 correctOrderStr
 000001DB			printSum	PROC
 000001DB  55				push	ebp
 000001DC  8B EC			mov		ebp, esp
 000001DE  60				pushad


 000001DF  8B 75 08			mov		esi, [ebp + 8]
 000001E2  B9 0000000A			mov		ecx, 10
 000001E7  33 D2			xor		edx, edx
 000001E9				startAdd:

 000001E9  8B 06				mov		eax, [esi]
 000001EB  03 D0				add		edx, eax
 000001ED  83 C6 04				add		esi, 4

 000001F0  E2 F7				loop	startAdd

 000001F2  8B C2			mov		eax, edx
 000001F4  FF 75 10			push	[ebp + 16]
 000001F7  FF 75 0C			push	[ebp + 12]
 000001FA  50				push	eax
 000001FB  E8 00000038			call	writeVal

 00000200  61				popad
 00000201  5D				pop		ebp
 00000202  C2 000C			ret		12
 00000205			printSum	ENDP

				; +8 array
				; +12 singleNumString
 00000205			printAverage PROC

 00000205  55				push	ebp
 00000206  8B EC			mov		ebp, esp
 00000208  60				pushad


 00000209  8B 75 08			mov		esi, [ebp + 8]
 0000020C  B9 0000000A			mov		ecx, 10
 00000211  33 D2			xor		edx, edx
 00000213				startAdd:

 00000213  8B 06				mov		eax, [esi]
 00000215  03 D0				add		edx, eax
 00000217  83 C6 04				add		esi, 4

 0000021A  E2 F7				loop	startAdd

 0000021C  8B C2			mov		eax, edx
 0000021E  33 D2			xor		edx, edx
 00000220  B9 0000000A			mov		ecx, 10
 00000225  F7 F1			div		ecx
					
 00000227  FF 75 10			push	[ebp + 16]
 0000022A  FF 75 0C			push	[ebp + 12]
 0000022D  50				push	eax
 0000022E  E8 00000005			call	writeVal

 00000233  61				popad
 00000234  5D				pop		ebp
 00000235  C2 000C			ret		12

 00000238			printAverage ENDP

				; +8 val
				; +12 singleNumString
				; +16 correctOrderStr
 00000238			writeVal PROC
 00000238  55				push	ebp
 00000239  8B EC			mov		ebp, esp
 0000023B  60				pushad
					
 0000023C  B9 0000000B			mov		ecx, 11
 00000241  8B 7D 0C			mov		edi, [ebp + 12]
					
 00000244			fillZero:
 00000244  33 D2			xor		edx, edx
 00000246  89 17			mov		[edi], edx
 00000248  47				inc		edi
 00000249  E2 F9			loop	fillZero







 0000024B  B9 0000000A			mov		ecx, 10
 00000250  8B 7D 0C			mov		edi, [ebp + 12]
 00000253  8B 45 08			mov		eax, [ebp + 8]
 00000256  03 F9			add		edi, ecx
 00000258  BB 0000000A			mov		ebx, 10

 0000025D			load:
 0000025D  33 D2			xor		edx, edx
 0000025F  F7 F3			div		ebx
 00000261  80 C2 30			add		dl, 48
					;edx (dl) now contains the char representation of the far right number
					
 00000264  88 17			mov		[edi], dl
 00000266  4F				dec		edi
 00000267  E2 F4			loop	load
						

					displayString edi
 00000269  52		     1		push	edx
 0000026A  8B D7	     1		mov		edx, edi
 0000026C  E8 00000000 E     1		call	WriteString
 00000271  5A		     1		pop		edx

 00000272  61				popad
 00000273  5D				pop		ebp
 00000274  C2 000C			ret		12
 00000277			writeVal ENDP

				END main

Microsoft (R) Macro Assembler Version 14.10.25019.0	    03/18/18 18:49:46
Assignment 						     Symbols 2 - 1




Macros:

                N a m e                 Type

displayString  . . . . . . . . .	Proc
getString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000019A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000277 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
convertToNum . . . . . . . . . .	P Near	 00000153 _TEXT	Length= 0000005A Public STDCALL
  nextDigit  . . . . . . . . . .	L Near	 0000016B _TEXT	
  invalidNumber  . . . . . . . .	L Near	 0000018D _TEXT	
  noMoreDigits . . . . . . . . .	L Near	 00000196 _TEXT	
fillArray  . . . . . . . . . . .	P Near	 000000C3 _TEXT	Length= 0000006A Public STDCALL
  loadStart  . . . . . . . . . .	L Near	 000000D2 _TEXT	
  didntCarry . . . . . . . . . .	L Near	 00000107 _TEXT	
  endCarryCheck  . . . . . . . .	L Near	 00000126 _TEXT	
  loadEnd  . . . . . . . . . . .	L Near	 00000128 _TEXT	
intro  . . . . . . . . . . . . .	P Near	 000000B2 _TEXT	Length= 00000011 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000B2 Public STDCALL
printArray . . . . . . . . . . .	P Near	 000001AD _TEXT	Length= 0000002E Public STDCALL
  startPrint . . . . . . . . . .	L Near	 000001B9 _TEXT	
printAverage . . . . . . . . . .	P Near	 00000205 _TEXT	Length= 00000033 Public STDCALL
  startAdd . . . . . . . . . . .	L Near	 00000213 _TEXT	
printSum . . . . . . . . . . . .	P Near	 000001DB _TEXT	Length= 0000002A Public STDCALL
  startAdd . . . . . . . . . . .	L Near	 000001E9 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 0000012D _TEXT	Length= 00000026 Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
writeVal . . . . . . . . . . . .	P Near	 00000238 _TEXT	Length= 0000003F Public STDCALL
  fillZero . . . . . . . . . . .	L Near	 00000244 _TEXT	
  load . . . . . . . . . . . . .	L Near	 0000025D _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_CHAR . . . . . . . . . . . .	Number	 0000000Ah   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayLabel . . . . . . . . . . .	Byte	 0000014F _DATA	
array  . . . . . . . . . . . . .	DWord	 00000124 _DATA	
averageText  . . . . . . . . . .	Byte	 0000015E _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
correctOrderStr  . . . . . . . .	Byte	 00000187 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
description  . . . . . . . . . .	Byte	 0000008D _DATA	
didCarry . . . . . . . . . . . .	DWord	 00000196 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbyeText  . . . . . . . . . .	Byte	 00000069 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
introText  . . . . . . . . . . .	Byte	 00000000 _DATA	
invalidNumStr  . . . . . . . . .	Byte	 000000F6 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numPrompt  . . . . . . . . . . .	Byte	 000000CE _DATA	
numSpacing . . . . . . . . . . .	Byte	 0000014C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
singleNumString  . . . . . . . .	Byte	 0000017C _DATA	
singleNum  . . . . . . . . . . .	DWord	 00000192 _DATA	
sumText  . . . . . . . . . . . .	Byte	 0000016F _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
